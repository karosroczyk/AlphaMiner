{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Case ID  Event ID  dd-MM-yyyy:HH.mm            Activity Resource  Costs\n",
      "0        1  35654423  30-12-2010:11.02    register request     Pete     50\n",
      "1        1  35654424  31-12-2010:10.06  examine thoroughly      Sue    400\n",
      "2        1  35654425  05-01-2011:15.12        check ticket     Mike    100\n",
      "3        1  35654426  06-01-2011:11.18              decide     Sara    200\n",
      "4        1  35654427  07-01-2011:14.24      reject request     Pete    200\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from pm4py.objects.log.importer.xes import factory as xes_importer\n",
    "import pandas as pd\n",
    "\n",
    "log = pd.read_csv(r\"C:\\Users\\Lenovo\\Desktop\\Magisterka\\AlphaMiner\\Chapter_1\\running-examplee.csv\")\n",
    "data = log.drop([\"Event ID\", \"dd-MM-yyyy:HH.mm\", \"Resource\", \"Costs\"], axis = 1)\n",
    "print(log.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Zbiór wszystkich tasków"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['register request' 'examine thoroughly' 'check ticket' 'decide'\n",
      " 'reject request' 'examine casually' 'pay compensation'\n",
      " 'reinitiate request']\n"
     ]
    }
   ],
   "source": [
    "column_values = data[[\"Activity\"]].values.ravel()\n",
    "tasks =  pd.unique(column_values)\n",
    "print(tasks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'register request': 0, 'examine thoroughly': 1, 'check ticket': 2, 'decide': 3, 'reject request': 4, 'examine casually': 5, 'pay compensation': 6, 'reinitiate request': 7}\n"
     ]
    }
   ],
   "source": [
    "dict = {}\n",
    "i = 0\n",
    "\n",
    "for k in tasks:\n",
    "    dict[k] = i\n",
    "    i = i + 1\n",
    "    \n",
    "print(dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "log_tab jest tablica tasks in specific case"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['register request' 'register request' 'examine casually' 'check ticket'\n",
      " 'decide' 'pay compensation']\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "#data = data.to_numpy()\n",
    "elem = data[0][0]\n",
    "log_tab = []\n",
    "log2_tab = []\n",
    "\n",
    "for i in range(len(data)):\n",
    "    if (data[i][0] != elem or i == (len(data)-1)): \n",
    "        if(i == (len(data)-1)):\n",
    "            log2_tab.append(data[i][1])\n",
    "        log2_tab = np.asarray(log2_tab)\n",
    "        log_tab.append(log2_tab)\n",
    "        log2_tab = log2_tab.tolist()\n",
    "        log2_tab.clear()\n",
    "        log2_tab.append(data[i][1])\n",
    "        elem = data[i][0]\n",
    "    log2_tab.append(data[i][1])\n",
    "    \n",
    "print(log_tab[5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2) Zbiór tasków wejściowych"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['register request']\n"
     ]
    }
   ],
   "source": [
    "Tinput = []\n",
    "\n",
    "for i in range(len(log_tab)):\n",
    "    if log_tab[i][0] not in Tinput:\n",
    "        Tinput.append(log_tab[i][0])\n",
    "        \n",
    "print(Tinput)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3) Zbiór tasków wyjściowych"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['reject request', 'pay compensation']\n"
     ]
    }
   ],
   "source": [
    "Toutput = []\n",
    "\n",
    "for i in range(len(log_tab)):\n",
    "    if log_tab[i][len(log_tab[i])-1] not in Toutput:\n",
    "        Toutput.append(log_tab[i][len(log_tab[i])-1])\n",
    "        \n",
    "print(Toutput)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "footprint = np.zeros((len(tasks)-1, len(tasks)-1))\n",
    "\n",
    "print(footprint)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
